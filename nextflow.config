MAX_RETRIES=4
defaultErrorStrategy = { if(task.attempt <= MAX_RETRIES){ sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry' } else { return 'ignore'  } }


params {

   megahit_image = "vout/megahit:release-v1.2.9"
   bowtie_image = "pbelmann/bowtie2:0.11.0"
   metabat_image = "metabat/metabat:v2.15-4-ga101cde"
   maxbin_image = "quay.io/biocontainers/maxbin2:2.2.7--he1b5a44_1"
   checkm_image = "pbelmann/checkm:0.12.0"
   gtdbtk_image = "ecogenomic/gtdbtk:1.5.0"
   prokka_image = "quay.io/biocontainers/prokka:1.14.5"
   fastp_image = "quay.io/biocontainers/fastp:0.20.1--h2e03b76_1"
   mash_image = "quay.io/biocontainers/mash:2.2.2--h3d38be6_1"
   python_env_image = "pbelmann/python-env:0.13.5"
   ani_image = "leightonpritchard/average_nucleotide_identity:v0.2.9"
   bwa_image = "quay.io/biocontainers/bwa:0.7.17--h5bf99c6_8"
   samtools_bwa_image = "pbelmann/bwa-samtools:0.13.3"
   samtools_image = "quay.io/biocontainers/samtools:1.12--h9aed4be_1"
   prokka_image = "quay.io/biocontainers/prokka:1.14.6--pl5262hdfd78af_1"
   cmseq_image = "pbelmann/cmseq:0.3.0"
   metabinner_image = "quay.io/biocontainers/metabinner:1.4.2--hdfd78af_0"
   cooccurrence_image = "pbelmann/cooccurrence:0.1.6"
   SCAPP_image = "quay.io/biocontainers/scapp:0.1.4--py_0"
   
   resources  {
     large { 
       cpus = 28
       memory = 256
     }
     medium { 
       cpus = 14 
       memory = 128
     }
     small {
       cpus = 7 
       memory = 16
     }
     tiny {
       cpus = 1 
       memory = 2
     }
   }

   modules {
      config {
         name = "config"
         version {
                major = 0 
                minor = 1
                patch = 0
         }
      }
      magAttributes {
         name = "magAttributes"
         version {
                major = 1 
                minor = 0
                patch = 0
         }
      }
      qc {
         name = "qc"
         version {
                major = 0
                minor = 1
                patch = 0
         }
      }
      assembly {
         name = "assembly"
         version {
                major = 1 
                minor = 1
                patch = 0
         }
      }
      plasmids {
         name = "plasmids"
         version {
                major = 0
                minor = 1
                patch = 0
         }
      }
      binning {
         name = "binning"
         version {
                major = 0
                minor = 2
                patch = 0
         }
      }
      dereplication {
         name = "dereplication"
         version {
                major = 0
                minor = 1
                patch = 0
         }
      }
      fragmentRecruitment {
         name = "fragmentRecruitment"
         version {
                major = 0
                minor = 1
                patch = 0
         }
      }
      metabolomics {
         name = "metabolomics"
         version {
                major = 0
                minor = 1
                patch = 0
         }
      }
      readMapping {
         name = "readMapping"
         version {
                major = 0
                minor = 1
                patch = 0
         }
      }
      sampleAnalysis {
         name = "sampleAnalysis"
         version {
                major = 0
                minor = 1
                patch = 0
         }
      }
      cooccurrence {
         name = "cooccurrence"
         version {
                major = 0
                minor = 1
                patch = 0
         }
      }
   }
}

timeline {
 enabled = true
 file = "log/timeline.html"
}

report {
 enabled = true
 file = "log/report.html"
}

dag {
 enabled =true
 file = "log/dag.dot"
}

trace {
 enabled = true
 file = "log/trace.tsv"
}

/*
*
* This method returns the maximum of the specified resources.
*/
def getMaxAvailableResource(type){
  return params.resources.subMap(params.resources.keySet()).values().collect({it[type]}).max()
}


/*
* 
* This closue returns the next higher cpu or memory value for specified exit codes of a failed tool run (e.g. due to memory restrictions).
* If the exit code is expected, this closure returns the next higher cpu/memory value computed by 
* the formula 2^(number of attempts) * (cpu/memory value of the assigned flavour).
* The highest possible cpu/memory value is restricted by the highest cpu/memory value of all flavours. 
*
*/
def getNextHigherResource = { exitCodes, exitStatus, currentResource, resourceType ,attempt ->  
                      maxResource = getMaxAvailableResource(resourceType);
                      if(exitStatus in exitCodes ){
                        if(currentResource * attempt < maxResource){
                          return Math.pow(2, attempt - 1) * currentResource as long;
                        } else {
                          return maxResource;
                        }
                      } else {
                          return currentResource;
                      }
}

profiles {
    slurm {  
        executor {
          queueSize = 600
          pollInterval = '5 sec'
          queueStatInterval = '5 sec'
        }

        docker {
           fixOwnership = true
           enabled = true
         }

        process {
           executor = 'slurm'
           containerOptions = ' --user 1000:1000 '
           scratch = "/vol/scratch/"

           maxRetries = MAX_RETRIES
           errorStrategy = defaultErrorStrategy 

           withLabel: large {
              cpus = params.resources.large.cpus
              memory = params.resources.large.memory
           }
           withLabel: medium {
              cpus = params.resources.medium.cpus
              memory = params.resources.medium.memory
           }
           withLabel: small {
              cpus = params.resources.small.cpus
              memory = params.resources.small.memory
           }
           withLabel: tiny {
              cpus = params.resources.tiny.cpus
              memory = params.resources.tiny.memory
           }
           withName: pMegahit {
              cpus = { getNextHigherResource([-9, 137], task.exitStatus, params.resources.large.cpus, "cpus", task.attempt) }
              memory = { getNextHigherResource([-9, 137], task.exitStatus, params.resources.large.memory, "memory", task.attempt) }
           }
     	}
    }
    local { 
         docker {
           fixOwnership = true
           enabled = true
         }
         process {
           executor = 'local'
           containerOptions = ' --user 1000:1000 '
           scratch = false

           maxRetries = MAX_RETRIES
           errorStrategy = defaultErrorStrategy

           withLabel: large {
              cpus = params.resources.large.cpus
              memory = params.resources.large.memory
           }
           withLabel: medium {
              cpus = params.resources.medium.cpus
              memory = params.resources.medium.memory
           }
           withLabel: small {
              cpus = params.resources.small.cpus
              memory = params.resources.small.memory
           }
           withLabel: tiny {
              cpus = params.resources.tiny.cpus
              memory = params.resources.tiny.memory
           }
           withName: pMegahit {
              cpus = { getNextHigherResource([-9, 137], task.exitStatus, params.resources.large.cpus, "cpus", task.attempt) }
              memory = { getNextHigherResource([-9, 137], task.exitStatus, params.resources.large.memory, "memory", task.attempt) }
           }
        }
    }
    conda {
         conda.createTimeout = '1 h'
         process.conda = { params.environment ? params.environment : "$projectDir/conda/metabolic.yml" }
         withName: 'pBwaIndex|pMapBwa|pMapBwaCami' {
             conda 'bioconda::bwa=0.7.17'
         }
    }
}


manifest {
  version = "0.2.2"
  name = "Meta-Omics-Toolkit"
}

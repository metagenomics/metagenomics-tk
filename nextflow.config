MAX_RETRIES=3
defaultErrorStrategy = { if(task.attempt <= MAX_RETRIES){ sleep(Math.pow(2, task.attempt) * 2000 as long); return 'retry' } else { return 'ignore'  } }

import java.util.regex.*;
import groovy.json.*
import org.yaml.snakeyaml.Yaml
import static groovy.json.JsonOutput.*



/*
* This method checks if a key exist before
* before executing a provided closure.
*
*/
def checkParamsKey(params, key, Closure c){
    if(params.containsKey(key)){
        return c(params[key])
    } else {
        return ""
    }
}

manifest {
  version = "0.3.0"
  name = "Metagenomics-Tk"
}

errorMess = [
     "databases": "",
     "output": "", 
     "input": "", 
     "scratch": "" 
   ]

PRETTY_SEPARATOR = "###################################################################"

System.out.println(PRETTY_SEPARATOR)
System.out.println("#############            Metagenomics-TK             ##############")
System.out.println(PRETTY_SEPARATOR) 

System.out.println("Version: " + manifest.version)
System.out.println("Mode: " + (params.containsKey("preset") ? "preset" : "default"))

if("dry-run" in params.keySet()){
	System.out.println("Dry-run is enabled!")
}


template = (params.containsKey("template") && params.containsKey("preset")) ?  params.template : "default/fullPipeline_illumina_nanpore.yml"

defaultYmlFile = new File("${baseDir}/" + template)
preLoadYML = new Yaml().load(defaultYmlFile.text)




/*
*
* Filter and compile steps (modules) that are provided by the user
*
*/
def getPresetSteps(){
   disableModules = ["metabolomics", "annotation", "fragmentRecruitment"]
   steps = preLoadYML["steps"]

   stepsKeys = steps.keySet()

   def stepsMap = [:]

   System.out.println(PRETTY_SEPARATOR)
   System.out.println("The following modules will be executed:\n")
   for(step in stepsKeys){
     if(!params.keySet().contains("no-" + step) && ! disableModules.contains(step)){
       System.out.println(step)
       stepsMap[step] = steps[step]
     }
   }
   if("dry-run" in params.keySet()){
        System.exit(0)
   } else {
   	return stepsMap
   }
}

/*
* Checks if the "preset" mode is provided by the user and calls an input parameter closure. Example closure could
* fetch parameters set in the default yaml.
*/
def getParamsVariable(parameter, Closure handleParameters = null, String finalParameterPreset = null, String finalParameter = null){
  def cl = null

  // If no closure is provided then fetch the parameter from the pre loaded yml which is saved in the 
  // toolkit repository.
  if(handleParameters==null){
    cl = { parameterClosure -> preLoadYML[parameterClosure] } 
  } else {
    cl = handleParameters
  }

  // If the preset mode is enabled then call the closure, if not then
  // use the parameters specified in the provided yaml.
  if(params.containsKey("preset")){
     if(finalParameterPreset==null){
     	return cl(parameter);
     } else {
        return finalParameterPreset;
     }
  } else {
     if(params.containsKey(parameter)){
       return params[parameter];
     } else {
       return finalParameter;
     }
  }
}

/*
* This method sets the database directory.
*/
def getPresetDatabases(){
  if(!params.containsKey("databases")){
    msg = "ERROR: No databases parameter provided!"
    errorMess["databases"] = msg
  } else {
    System.out.println("Databases directory: " + params.databases)
    return params.databases
  }

}

/*
* This method sets the scratch directory.
*/
def getPresetScratch(){
  if(!params.containsKey("scratch")){
    msg = "ERROR: No scratch parameter provided!"
    errorMess["scratch"] = msg
  } else {
    System.out.println("Scratch directory: " + params.scratch)
    return params.scratch
  }
}


/*
* This method checks if the user has provided an output parameter.
*/
def getPresetOutput(){
  if(!params.containsKey("output")){
    msg = "ERROR: No output parameter provided!"
    errorMess["output"] = msg
  } else {
    System.out.println("Output path: " + params.output)
    return params.output
  }
}


/*
*  Retrieves input parameters specified by the user (Paired vs. ONT parameter).
*/
def getPresetInput(){
  System.out.println(PRETTY_SEPARATOR)

  if(!params?.input.containsKey("ont") && !params?.input.containsKey("paired")){
    msg = "ERROR: No valid input parameter provided!"
    errorMess["input"] = msg
    return []
  } else {
    System.out.println("Input parameters are the following: \n")
    System.out.println(prettyPrint(toJson(params.input)))
    return params.input
  } 
}


/*
* Resources can be defined in preset mode using the --flavorSize cpus,memory parameter.
*
*/
def getPresetResources(){
   def resources = preLoadYML["resources"]
   System.out.println(PRETTY_SEPARATOR)
   System.out.println("The following job flavors are defined:\n")
   
   def CPUS_KEY = 0
   def MEMORY_KEY = 1

   for(flavorSize in resources.keySet()){
     cpus = resources[flavorSize]["cpus"]
     ram = resources[flavorSize]["memory"]

     if(params.containsKey(flavorSize)){
       cpus = params[flavorSize].split(",")[CPUS_KEY] as Integer
       ram = params[flavorSize].split(",")[MEMORY_KEY] as Integer
       resources[flavorSize]["cpus"] = cpus
       resources[flavorSize]["memory"] = ram
     }
     System.out.println("Flavor:" + flavorSize + ", CPUs:" + cpus + ", Memory:" + ram)
   }
   return resources
}


defaultResources {
     highmemLarge { 
       cpus = 28
       memory = 230
     }
     highmemMedium {  
       cpus = 14
       memory = 113
     }
     large {
       cpus = 28
       memory = 58
     }
     medium {
       cpus = 14
       memory = 29
     }
     small {
       cpus = 7 
       memory = 14
     }
     tiny {
       cpus = 1 
       memory = 2
     }
}


params {

   tempdir = getParamsVariable("tempdir")
   summary = getParamsVariable("summary")
   input = getParamsVariable("input", { _ -> getPresetInput() })
   output = getParamsVariable("output", { _ -> getPresetOutput() })
   logDir = getParamsVariable( "logDir", null, "log" )
   runid = getParamsVariable("runid")
   databases = getParamsVariable("databases", { _ -> getPresetDatabases() }, null, "")
   publishDirMode = getParamsVariable("publishDirMode", null, "symlink", "symlink")
   logLevel = getParamsVariable("logLevel", null, "1", "1")
   scratch = getParamsVariable("scratch", { _ -> getPresetScratch() })

   steps = getParamsVariable("steps", { _ -> getPresetSteps() } )

   polished {
     databases = checkParamsKey(params, "databases", { path -> (path.endsWith("/") || !path) ? path : path + "/" })
   }

   logFileName = ""

   supportedVersions = [
        [ YEAR : 23, MONTH : 10]
   ]

   skipVersionCheck = false

   pysradb_image = "quay.io/biocontainers/pysradb:1.4.1--pyhdfd78af_0"
   minimap2_image= "quay.io/biocontainers/minimap2:2.24--h7132678_1"
   metaflye_image = "quay.io/biocontainers/flye:2.9--py36h7281c5b_1"
   metacoag_image = "quay.io/metagenomics/toolkit-metacoag:1.0.0-0"
   porechop_image = "quay.io/biocontainers/porechop:0.2.4--py39hc16433a_3"
   bandage_image = "quay.io/biocontainers/bandage:0.8.1--hc9558a2_2"
   nonpareil_image = "quay.io/biocontainers/nonpareil:3.4.1--r41h9f5acd7_1"
   ubuntu_image = "quay.io/metagenomics/toolkit-ubuntu:20.04-0"
   carveme_image = "quay.io/metagenomics/toolkit-carveme:1.6.1-0"
   cobra_image = "quay.io/biocontainers/cobra:0.21.0--pyh5e36f6f_1"
   memote_image = "quay.io/metagenomics/toolkit-memote:0.13.0-0"
   smetana_image = "smetana"
   gapseq_image = "quay.io/metagenomics/toolkit-gapseq:2022.01.1-0"
   assemblerResourceEstimator_image = "quay.io/p_belmann/assembler_resource_estimator:0.5.0"
   platon_image = "quay.io/biocontainers/platon:1.6--pyhdfd78af_1"
   viralVerify_image = "quay.io/biocontainers/viralverify:1.1--hdfd78af_0"
   mobSuite_image = "quay.io/metagenomics/toolkit-mob-suite:3.1.0-0"
   metaspades_image = "quay.io/biocontainers/spades:3.15.5--h95f258a_0"
   megahit_image = "quay.io/biocontainers/megahit:1.2.9--h5b5514e_2"
   bowtie_image = "quay.io/metagenomics/toolkit-bowtie2:0.1.0"
   metabat_image = "quay.io/metagenomics/toolkit-metabat:v2.15-5-g1a9bac2-0"
   maxbin_image = "quay.io/biocontainers/maxbin2:2.2.7--he1b5a44_2"
   gtdbtk_image = "quay.io/metagenomics/toolkit-gtdbtk:2.1.1-2"
   checkm_image = "quay.io/metagenomics/toolkit-checkm:0.1.0"
   checkm2_image = "quay.io/metagenomics/toolkit-checkm2:1.0.2-1"
   prokka_image = "quay.io/metagenomics/toolkit-prokka:1.14.6-1"
   fastp_image = "quay.io/biocontainers/fastp:0.23.2--h79da9fb_0"
   nanoplot_image = "quay.io/biocontainers/nanoplot:1.40.0--pyhdfd78af_0"
   mash_image = "quay.io/biocontainers/mash:2.3--hd3113c8_4"
   python_env_image = "quay.io/metagenomics/toolkit-python-env:0.1.11"
   ani_image = "quay.io/metagenomics/toolkit-ani:v0.2.9-0"
   bwa_image = "quay.io/biocontainers/bwa:0.7.17--pl5.22.0_2"
   bwa2_image = "quay.io/biocontainers/bwa-mem2:2.2.1--hd03093a_2"
   samtools_bwa_image = "quay.io/metagenomics/toolkit-bwa-samtools:0.1.0"
   samtools_bwa2_image = "quay.io/metagenomics/toolkit-bwa2-samtools:0.1.1"
   samtools_image = "quay.io/biocontainers/samtools:1.14--hb421002_0"
   cmseq_image = "quay.io/metagenomics/toolkit-cmseq:0.1.0"
   metabinner_image = "quay.io/biocontainers/metabinner:1.4.2--hdfd78af_0"
   cooccurrence_image = "quay.io/p_belmann/cooccurrence:0.5.1"
   prodigal_image = "quay.io/biocontainers/prodigal:2.6.3--h779adbc_3"
   SCAPP_image = "quay.io/biocontainers/scapp:0.1.4--py_0"
   PlasClass_image = "quay.io/biocontainers/plasclass:0.1.1--pyhdfd78af_0"
   rgi_image = "quay.io/biocontainers/rgi:6.0.1--pyha8f3691_1"
   sans_image = "quay.io/metagenomics/toolkit-sans:0.1.0"
   mmseqs2_image = "quay.io/microbiome-informatics/mmseqs:2.13"
   magscot_image = "quay.io/metagenomics/toolkit-magscot:1.0.0"
   kmc_image = "quay.io/biocontainers/kmc:3.2.1--hf1761c0_2"

   resources = params.containsKey("preset") ? getPresetResources() : defaultResources
   publishDirMode = "symlink"


   LOG_LEVELS {
       ALL = 0
       INFO = 1
   }

   modules {
      config {
         name = "config"
         version {
                major = 0 
                minor = 1
                patch = 0
         }
      }
      magAttributes {
         name = "magAttributes"
         version {
                major = 2 
                minor = 0
                patch = 0
         }
      }
      qc {
         name = "qc"
         version {
                major = 0
                minor = 3
                patch = 0
         }
         process {
            fastp {
               defaults {
                 time = 6
                 flavor = defaultResources.highmemMedium
               }
            }
            kmc {
               defaults {
                 time = 6
                 flavor = defaultResources.small
               }
            }
            fastpDownload {
               defaults {
                 time = 6
                 flavor = defaultResources.highmemMedium
               }
            }
         }
      }
      qcONT {
         name = "qcONT"
         version {
                major = 0
                minor = 1
                patch = 0
         }
      }
      assembly {
         name = "assembly"
         version {
                major = 1 
                minor = 2
                patch = 1
         }

         process {
            pMegahit {
               defaults {
                 flavor = defaultResources.highmemLarge
               }
            }
         }
      }
      assemblyONT {
         name = "assemblyONT"
         version {
                major = 0
                minor = 1
                patch = 0
         }
      }
      plasmids {
         name = "plasmids"
         version {
                major = 2
                minor = 0
                patch = 0
         }
         process {
            pMobTyper {
               defaults {
                 flavor = defaultResources.highmemMedium
                 inputSize = 10000 
               }
            }
            pPlasClass {
               defaults {
                 flavor = defaultResources.highmemMedium
                 inputSize = 90000 
               }
            }

         }
      }
      binning {
         name = "binning"
         version {
                major = 0
                minor = 5
                patch = 0
         }
      }
      binningONT {
         name = "binningONT"
         version {
                major = 0
                minor = 1
                patch = 0
         }
      }
      dereplication {
         name = "dereplication"
         version {
                major = 0
                minor = 1
                patch = 1
         }
      }
      fragmentRecruitment {
         name = "fragmentRecruitment"
         version {
                major = 0
                minor = 1
                patch = 0
         }
         process {
            unzip {
               defaults {
                 time = 1
                 flavor = defaultResources.tiny
               }
            }
         }
      }
      metabolomics {
         name = "metabolomics"
         version {
                major = 0
                minor = 1
                patch = 0
         }
      }
      readMapping {
         name = "readMapping"
         version {
                major = 0
                minor = 1
                patch = 0
         }
      }
      annotation {
         name = "annotation"
         version {
                major = 1
                minor = 0
                patch = 0
         }
      }
      cooccurrence {
         name = "cooccurrence"
         version {
                major = 0
                minor = 1
                patch = 0
         }
         process {
            pBuildSpiecEasiNetwork {
               defaults {
                 time = 48
                 flavor = defaultResources.highmemLarge
               }
            }
         }
      }
}

}


def timestamp = new java.util.Date().format( 'YYYYMMdd-HHmmss-SSS')
def name = params.logFileName?.trim()? params.logFileName?.trim() : timestamp
timeline {
 enabled = true
 file = params.logDir + "/timeline.${name}.html"
}

report {
 enabled = true
 file = params.logDir + "/report.${name}.html"
}

dag {
 enabled =true
 file = params.logDir + "/dag.${name}.dot"
}

trace {
 enabled = true
 file = params.logDir + "/trace.${name}.tsv"
 overwrite = false
 raw = true
 fields = 'task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,' \
	+ 'attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,' \
	+ 'rchar,wchar,syscr,syscw,read_bytes,write_bytes,vol_ctxt,inv_ctxt,workdir,scratch,error_action,hostname'
}




profiles {
    slurm {  
        executor {
          queueSize = 600
          pollInterval = '5 sec'
          queueStatInterval = '20 sec'
        }

        docker {
           fixOwnership = true
           enabled = true
         }

        process {
           cache = 'lenient'
           executor = 'slurm'
           scratch = params.scratch

           stageInMode = params.containsKey("stageInMode") ? params.stageInMode : "symlink"
    
           maxRetries = MAX_RETRIES
           errorStrategy = defaultErrorStrategy 

           withLabel: highmemLarge {
              cpus = params.resources.highmemLarge.cpus
              memory = params.resources.highmemLarge.memory + " GB"
           }
           withLabel: highmemMedium {
              cpus = params.resources.highmemMedium.cpus
              memory = params.resources.highmemMedium.memory + " GB"
           }
           withLabel: large {
              cpus = params.resources.large.cpus
              memory = params.resources.large.memory + " GB"
           }
           withLabel: medium {
              cpus = params.resources.medium.cpus
              memory = params.resources.medium.memory + " GB"
           }
           withLabel: small {
              cpus = params.resources.small.cpus
              memory = params.resources.small.memory + " GB"
           }
           withLabel: tiny {
              cpus = params.resources.tiny.cpus
              memory = params.resources.tiny.memory + " GB"
           }
     	}
    }
    standard { 
         docker {
           fixOwnership = true
           enabled = true
         }
         process {
           cache = 'lenient'
           executor = 'local'
           scratch = false

           maxRetries = MAX_RETRIES
           errorStrategy = defaultErrorStrategy

           withLabel: highmemLarge {
              cpus = params.resources.highmemLarge.cpus
              memory = params.resources.highmemLarge.memory + " GB"
           }
           withLabel: highmemMedium {
              cpus = params.resources.highmemMedium.cpus
              memory = params.resources.highmemMedium.memory + " GB"
           }
           withLabel: large {
              cpus = params.resources.large.cpus
              memory = params.resources.large.memory + " GB"
           }
           withLabel: medium {
              cpus = params.resources.medium.cpus
              memory = params.resources.medium.memory + " GB"
           }
           withLabel: small {
              cpus = params.resources.small.cpus
              memory = params.resources.small.memory + " GB"
           }
           withLabel: tiny {
              cpus = params.resources.tiny.cpus
              memory = params.resources.tiny.memory + " GB"
           }
        }
    }
}

if(params.containsKey("help") || !errorMess.values().every{ it.isEmpty() }){
      System.out.println(PRETTY_SEPARATOR)
      System.out.println("Help Page:\n")

      System.out.println("Mandatory Parameters:")
      def additionalParameters = ["databases": "\t\tPath to a folder where databases are downloaded and extracted. \n" + 
					       "\t\t\tIf you are using slurm then the path should point to a folder which is local to the worker host and not shared by all workers.", 
				  "scratch": "\t\tScratch directory which is used for storing intermediate results.", 
				  "output": "\t\tOutput directory path or S3 url.", 
				  "input.ont.path": "\tPath to a samplesheet containing the two columns: SAMPLE and PATH.\n" +
						"\t\t\tSAMPLE contains the id of the dataset and the PATH column contains the path or url that points to the nanopore datasets.",
				  "input.paired.path": "\tPath that points to a samplesheet with the required columns SAMPLE, READS1 and READS2.\n" + 
							"\t\t\tREADS1 and READS2 point to paths or urls of the input datasets."]

      for(key in additionalParameters.keySet()){
	System.out.println("--" + key + ": " + additionalParameters[key])
      }
      System.out.println("")

      System.out.println("Optional Parameters:")

      System.out.println("Possible resource settings with the values cpus and ram.")
      System.out.println("Example: --tiny 1,4 means 1 cpu and 4 GB RAM.")
      resourceKeys = params.resources.keySet()
      for(key in resourceKeys){
	System.out.println("--" + key)
      }

      modulesKeys = params.steps.keySet()
      
      System.out.println("")
      System.out.println("You can disable modules via the following parameters:")
      for(key in modulesKeys){
	System.out.println("--no-" + key)
      }

      if(!params.containsKey("help")){
        for(err in errorMess.keySet()){
	  System.err.println(errorMess[err])
        }
      }
      System.exit(0)
}

aws {
  accessKey = params.s3SignIn ? secrets.S3_ACCESS : ""
  secretKey = params.s3SignIn ? secrets.S3_SECRET : ""
}

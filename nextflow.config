MAX_RETRIES=3
defaultErrorStrategy = { if(task.attempt <= MAX_RETRIES){ sleep(Math.pow(2, task.attempt) * 2000 as long); return 'retry' } else { return 'ignore'  } }

import java.util.regex.*;

/*
* This method checks if a key exist before
* before executing a provided closure.
*
*/
def checkParamsKey(params, key, Closure c){
    if(params.containsKey(key)){
        return c(params[key])
    } else {
        return ""
    }
}


defaultResources {
     large { 
       cpus = 28
       memory = 230
     }
     medium {  
       cpus = 14
       memory = 113
     }
     small {
       cpus = 7 
       memory = 14
     }
     tiny {
       cpus = 1 
       memory = 2
     }
}


params {

   polished {
     databases = checkParamsKey(params, "databases", { path -> path.endsWith("/") ? path : path + "/" })
   }

   supportedVersions = [
        [ YEAR : 22, MONTH : 4], \
        [ YEAR : 22, MONTH :10], \
   ]

   skipVersionCheck = false

   publishDirMode = "symlink"

   pysradb_image = "quay.io/biocontainers/pysradb:1.4.1--pyhdfd78af_0"
   ubuntu_image = "ubuntu:20.04"
   minimap2_image= "quay.io/biocontainers/minimap2:2.24--h7132678_1"
   metaflye_image = "quay.io/biocontainers/flye:2.9--py36h7281c5b_1"
   metacoag_image = "quay.io/metagenomics/toolkit-metacoag:1.0.0-0"
   porechop_image = "quay.io/biocontainers/porechop:0.2.4--py39hc16433a_3"
   bandage_image = "quay.io/biocontainers/bandage:0.8.1--hc9558a2_2"
   nonpareil_image = "quay.io/biocontainers/nonpareil:3.4.1--r41h9f5acd7_1"
   jellyfish_image = "quay.io/biocontainers/kmer-jellyfish:2.3.0--h7d875b9_2"
   ubuntu_image = "ubuntu:20.04"
   carveme_image = "carveme"
   cobra_image = "quay.io/biocontainers/cobra:0.21.0--pyh5e36f6f_1"
   memote_image = "quay.io/metagenomics/toolkit-memote:0.13.0-0"
   smetana_image = "smetana"
   gapseq_image = "cdiener/gapseq:2022.01.1"
   assemblerResourceEstimator_image = "pbelmann/assembler_resource_estimator:0.1.0"
   platon_image = "quay.io/biocontainers/platon:1.6--pyhdfd78af_1"
   viralVerify_image = "quay.io/biocontainers/viralverify:1.1--hdfd78af_0"
   mobSuite_image = "quay.io/metagenomics/toolkit-mob-suite:3.1.0-0"
   metaspades_image = "quay.io/biocontainers/spades:3.15.5--h95f258a_0"
   megahit_image = "vout/megahit:release-v1.2.9"
   bowtie_image = "quay.io/metagenomics/toolkit-bowtie2:0.1.0"
   metabat_image = "metabat/metabat:v2.15-5-g1a9bac2"
   maxbin_image = "quay.io/biocontainers/maxbin2:2.2.7--he1b5a44_2"
   gtdbtk_image = "quay.io/biocontainers/gtdbtk:2.1.1--pyhdfd78af_1"
   checkm_image = "quay.io/metagenomics/toolkit-checkm:0.1.0"
   prokka_image = "quay.io/metagenomics/toolkit-prokka:1.14.6-0"
   fastp_image = "quay.io/biocontainers/fastp:0.23.2--h79da9fb_0"
   nanoplot_image = "quay.io/biocontainers/nanoplot:1.40.0--pyhdfd78af_0"
   mash_image = "quay.io/biocontainers/mash:2.3--hd3113c8_4"
   python_env_image = "quay.io/metagenomics/toolkit-python-env:0.1.11"
   ani_image = "leightonpritchard/average_nucleotide_identity:v0.2.9"
   bwa_image = "quay.io/biocontainers/bwa:0.7.17--pl5.22.0_2"
   bwa2_image = "quay.io/biocontainers/bwa-mem2:2.2.1--hd03093a_2"
   samtools_bwa_image = "quay.io/metagenomics/toolkit-bwa-samtools:0.1.0"
   samtools_bwa2_image = "quay.io/metagenomics/toolkit-bwa2-samtools:0.1.1"
   samtools_image = "quay.io/biocontainers/samtools:1.14--hb421002_0"
   cmseq_image = "quay.io/metagenomics/toolkit-cmseq:0.1.0"
   metabinner_image = "quay.io/biocontainers/metabinner:1.4.2--hdfd78af_0"
   cooccurrence_image = "quay.io/p_belmann/cooccurrence:0.4.3"
   prodigal_image = "quay.io/biocontainers/prodigal:2.6.3--h779adbc_3"
   SCAPP_image = "quay.io/biocontainers/scapp:0.1.4--py_0"
   PlasClass_image = "quay.io/biocontainers/plasclass:0.1.1--pyhdfd78af_0"
   rgi_image = "quay.io/biocontainers/rgi:6.0.1--pyha8f3691_1"
   sans_image = "quay.io/metagenomics/toolkit-sans:0.1.0"
   mmseqs2_image = "quay.io/microbiome-informatics/mmseqs:2.13"

   resources = defaultResources
   publishDirMode = "symlink"


   LOG_LEVELS {
       ALL = 0
       INFO = 1
   }

   modules {
      config {
         name = "config"
         version {
                major = 0 
                minor = 1
                patch = 0
         }
      }
      magAttributes {
         name = "magAttributes"
         version {
                major = 1 
                minor = 0
                patch = 1
         }
      }
      qc {
         name = "qc"
         version {
                major = 0
                minor = 3
                patch = 0
         }
         process {
            fastp {
               defaults {
                 time = 6
                 flavor = defaultResources.medium
               }
            }
            fastpDownload {
               defaults {
                 time = 12
                 flavor = defaultResources.medium
               }
            }
         }
      }
      qcONT {
         name = "qcONT"
         version {
                major = 0
                minor = 1
                patch = 0
         }
      }
      assembly {
         name = "assembly"
         version {
                major = 1 
                minor = 2
                patch = 1
         }

         process {
            pMegahit {
               defaults {
                 flavor = defaultResources.large
               }
            }
         }
      }
      assemblyONT {
         name = "assemblyONT"
         version {
                major = 0
                minor = 1
                patch = 0
         }
      }
      plasmids {
         name = "plasmids"
         version {
                major = 1
                minor = 0
                patch = 0
         }
         process {
            pMobTyper {
               defaults {
                 flavor = defaultResources.medium
                 inputSize = 10000 
               }
            }
         }
      }
      binning {
         name = "binning"
         version {
                major = 0
                minor = 4
                patch = 0
         }
      }
      binningONT {
         name = "binningONT"
         version {
                major = 0
                minor = 1
                patch = 0
         }
      }
      dereplication {
         name = "dereplication"
         version {
                major = 0
                minor = 1
                patch = 1
         }
      }
      fragmentRecruitment {
         name = "fragmentRecruitment"
         version {
                major = 0
                minor = 1
                patch = 0
         }
      }
      metabolomics {
         name = "metabolomics"
         version {
                major = 0
                minor = 1
                patch = 0
         }
      }
      readMapping {
         name = "readMapping"
         version {
                major = 0
                minor = 1
                patch = 0
         }
      }
      annotation {
         name = "annotation"
         version {
                major = 0
                minor = 2
                patch = 0
         }
      }
      cooccurrence {
         name = "cooccurrence"
         version {
                major = 0
                minor = 1
                patch = 0
         }
         process {
            pBuildSpiecEasiNetwork {
               defaults {
                 time = 48
                 flavor = defaultResources.large
               }
            }
         }
      }
   }
}


def timestamp = new java.util.Date().format( 'YYYYMMdd-HHmmss-SSS')
timeline {
 enabled = true
 file = params.logDir + "/timeline.${timestamp}.html"
}

report {
 enabled = true
 file = params.logDir + "/report.${timestamp}.html"
}

dag {
 enabled =true
 file = params.logDir + "/dag.${timestamp}.dot"
}

trace {
 enabled = true
 file = params.logDir + "/trace.${timestamp}.tsv"
 overwrite = false
 raw = true
}



profiles {
    slurm {  
        executor {
          queueSize = 600
          pollInterval = '5 sec'
          queueStatInterval = '5 sec'
        }

        docker {
           fixOwnership = true
           enabled = true
         }

        process {
           cache = 'lenient'
           executor = 'slurm'
           scratch = params.scratch

           stageInMode = params.containsKey("stageInMode") ? params.stageInMode : "symlink"
    
           maxRetries = MAX_RETRIES
           errorStrategy = defaultErrorStrategy 

           withLabel: large {
              cpus = params.resources.large.cpus
              memory = params.resources.large.memory + " GB"
           }
           withLabel: medium {
              cpus = params.resources.medium.cpus
              memory = params.resources.medium.memory + " GB"
           }
           withLabel: small {
              cpus = params.resources.small.cpus
              memory = params.resources.small.memory + " GB"
           }
           withLabel: tiny {
              cpus = params.resources.tiny.cpus
              memory = params.resources.tiny.memory + " GB"
           }
     	}
    }
    standard { 
         docker {
           fixOwnership = true
           enabled = true
         }
         process {
           cache = 'lenient'
           executor = 'local'
           scratch = false

           maxRetries = MAX_RETRIES
           errorStrategy = defaultErrorStrategy

           withLabel: large {
              cpus = params.resources.large.cpus
              memory = params.resources.large.memory + " GB"
           }
           withLabel: medium {
              cpus = params.resources.medium.cpus
              memory = params.resources.medium.memory + " GB"
           }
           withLabel: small {
              cpus = params.resources.small.cpus
              memory = params.resources.small.memory + " GB"
           }
           withLabel: tiny {
              cpus = params.resources.tiny.cpus
              memory = params.resources.tiny.memory + " GB"
           }
        }
    }
}



manifest {
  version = "0.2.2"
  name = "Meta-Omics-Toolkit"
}

